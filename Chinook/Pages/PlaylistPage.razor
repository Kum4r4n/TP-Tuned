@page "/playlist/{PlaylistId:long}"
@attribute [Authorize]

@using Chinook.ClientModels
@using Chinook.Models
@using Chinook.Services.Interfaces
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims;

<h1>Playlist <strong>@Playlist.Name</strong></h1>

@if (!string.IsNullOrWhiteSpace(InfoMessage))
{
    <div class="alert alert-info fade show">
        <div class="d-flex align-items-start">
            <div class="flex-grow-1">
                @InfoMessage
            </div>
            <button type="button" class="btn-close" aria-label="Close" @onclick="CloseInfoMessage"></button>
        </div>
    </div>
}

@if (Playlist == null)
{
     <Loading />
}
else
{
    <table class="table table-striped table-hover table-sm">
        <thead>
            <tr>
                <th>Track</th>
                <th></th>
        </tr>
        </thead>
        <tbody>
            @foreach (var track in Playlist.Tracks)
            {
                <tr>
                    <td>@track.ArtistName - @track.AlbumTitle - @track.TrackName</td>
                    <td>
                        <div class="d-flex">
                            @if (Playlist.Name != "Favorite")
                            {
                                @if (track.IsFavorite)
                                {
                                    <a href="#" class="m-1" title="Unark as favorite" @onclick="@(() => UnfavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star-fill"></i></a>
                                }
                                else
                                {
                                    <a href="#" class="m-1" title="Mark as favorite" @onclick="@(() => FavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star"></i></a>
                                }

                            }
                            <a href="#" class="m-1" title="Remove from this playlist" @onclick="@(() => RemoveTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-trash"></i></a>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter] public long PlaylistId { get; set; }
    [Inject] IDbContextFactory<ChinookContext> DbFactory { get; set; }
    [CascadingParameter] private Task<AuthenticationState> authenticationState { get; set; }

    [Inject] private IPlayListTrackService _playListTrackService { get; set; }

    private Chinook.ClientModels.PlayListViewModel Playlist;
    private string CurrentUserId;
    private string InfoMessage;

    protected override async Task OnInitializedAsync()
    {
        CurrentUserId = await GetUserId();

        await InvokeAsync(StateHasChanged);

        await GetTracks(PlaylistId);
    }

    private async Task GetTracks(long id)
    {
        var playListData = await _playListTrackService.GetPlayListData(id);

        Playlist = new PlayListViewModel()
            {
                Name = playListData.Name,
                PlaylistId = playListData.PlaylistId,
                Tracks = playListData.Tracks.Select(s => new PlayListTrackViewModel()
                {
                    AlbumTitle = s.Album.Title,
                    ArtistName = s.Album.Artist.Name,
                    TrackId = s.TrackId,
                    TrackName = s.Name,
                    IsFavorite = s.Playlists.Where(p => p.UserPlaylists.Any(up => up.UserId == CurrentUserId && up.Playlist.Name == "Favorite_1")).Any()

                }).ToList()

            };
    }


    private async Task<string> GetUserId()
    {
        var user = (await authenticationState).User;
        var userId = user.FindFirst(u => u.Type.Contains(ClaimTypes.NameIdentifier))?.Value;
        return userId;
    }

    private async void FavoriteTrack(long trackId)
    {
        var track = await _playListTrackService.AddTrackAsFavorite(trackId, CurrentUserId);
        await GetTracks(PlaylistId);
        InfoMessage = $"Track {track.Album?.Artist.Name} - {track.Album?.Title} - {track.Name} added to playlist Favorites.";
    }

    private async void UnfavoriteTrack(long trackId)
    {
        var track = await _playListTrackService.RemoveTrackFromFavorite(trackId, CurrentUserId);
        await GetTracks(PlaylistId);
        InfoMessage = $"Track {track.Album?.Artist.Name} - {track.Album?.Title} - {track.Name} removed from playlist Favorites.";
    }

    private async void RemoveTrack(long trackId)
    {
        await _playListTrackService.RemoveTrackFromPlayList(trackId, PlaylistId);
        await GetTracks(PlaylistId);
        CloseInfoMessage();
    }

    private void CloseInfoMessage()
    {
        InfoMessage = "";
    }

}
