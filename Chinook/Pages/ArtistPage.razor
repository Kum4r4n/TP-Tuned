@page "/artist/{ArtistId:long}"
@attribute [Authorize]

@using AutoMapper
@using Chinook.Models
@using Chinook.ClientModels
@using Chinook.Services.Interfaces
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims;

@if (!string.IsNullOrWhiteSpace(InfoMessage))
{
    <div class="alert alert-info fade show">
        <div class="d-flex align-items-start">
            <div class="flex-grow-1">
                @InfoMessage
            </div>
            <button type="button" class="btn-close" aria-label="Close" @onclick="CloseInfoMessage"></button>
        </div>
    </div>
}

@if (_artist == null)
{
    <Loading />
}
else
{

    

    <h1>@_artist.Name</h1>
        <table class="table table-striped table-hover table-sm">
            <thead>
                <tr>
                    <th>Album title</th>
                    <th>Track name</th>
                    <th></th>
            </tr>
            </thead>
            <tbody>
            @foreach (var track in _tracks)
            {
                <tr>
                    <td>@track.AlbumTitle</td>
                    <td>@track.TrackName</td>
                    <td>
                        @if (track.IsFavorite)
                        {
                            <a href="#" class="m-1" title="Unmark as favorite" @onclick="@(() => UnfavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star-fill"></i></a>
                        }
                        else
                        {
                            <a href="#" class="m-1" title="Mark as favorite" @onclick="@(() => FavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star"></i></a>
                        }
                        <a href="#" class="m-1" title="Add to playlist" @onclick="@(() => OpenPlaylistDialog(track.TrackId))" @onclick:preventDefault><i class="bi bi-file-earmark-plus"></i></a>
                    </td>
                </tr>
            }
            </tbody>
        </table>
}

<Modal @ref="PlaylistDialog">
    <Title>Add to playlist</Title>
    <Body>
        @if (SelectedTrack != null)
        {
            <div class="form-group mb-2">
                <label>@_artist.Name - @SelectedTrack.AlbumTitle - @SelectedTrack.TrackName</label>
            </div>
        }

        <div class="mb-2">
            <label for="ExistingPlaylist">Add to existing playlist</label>
            <select class="form-control" id="ExistingPlaylist" @bind="_selectedPlayListId">
                @foreach (var playList in _playListDropdown)
                {
                    <option value=@playList.PlaylistId>@playList.Name</option>
                }
            </select>
        </div>
        <div class="mb-2">
            <label for="NewPlaylist">Create new playlist</label>
            <input type="text" id="NewPlaylist" class="form-control" placeholder="Name for the new playlist" @bind="_newPlayListName">
        </div>
    </Body>
    <Footer>
        <button class="btn btn-success" @onclick="AddTrackToPlaylist">Save</button>
    </Footer>
</Modal>

@code {


    [Inject] private IArtistService _artistService { get; set; }
    [Inject] private IPlayListTrackService _playListTrackService { get; set; }
    [Inject] private IMapper _mapper { get; set; }

   

    [Parameter] public long ArtistId { get; set; }
    [CascadingParameter] private Task<AuthenticationState> authenticationState { get; set; }
    private Modal PlaylistDialog { get; set; }

    private ArtistViewModel _artist;
    private List<PlayListTrackViewModel> _tracks;
    private string InfoMessage;
    private string CurrentUserId;

    private List<PlayListViewModel> _playListDropdown;

    private Chinook.ClientModels.PlayListTrackViewModel SelectedTrack;



    private long _selectedPlayListId;
    private string _newPlayListName;



    protected override async Task OnInitializedAsync()
    {
        await InvokeAsync(StateHasChanged);
        CurrentUserId = await GetUserId();
        var userPlayList = await _playListTrackService.GetPlayListByUser(CurrentUserId);
        _playListDropdown = _mapper.Map<List<PlayListViewModel>>(userPlayList);
        await GetArtistTracks(ArtistId);
    }

    private async Task GetArtistTracks(long id)
    {
        var artist = await _artistService.GetArtist(id);
        _artist = _mapper.Map<ArtistViewModel>(artist);
        _tracks = artist.Albums.SelectMany(s =>

            s.Tracks.Select(ss=>
            {
                return new PlayListTrackViewModel()
                {
                    AlbumTitle = s.Title,
                    TrackId = ss.TrackId,
                    ArtistName = artist?.Name ?? string.Empty,
                    TrackName = ss.Name,
                        IsFavorite = ss.Playlists.Where(p => p.UserPlaylists.Any(up => up.UserId == CurrentUserId && up.Playlist.Name == "Favorite_1")).Any()
                    };

            }).ToList()

        ).ToList();
    }




    private async Task<string> GetUserId()
    {
        var user = (await authenticationState).User;
        var userId = user.FindFirst(u => u.Type.Contains(ClaimTypes.NameIdentifier))?.Value;
        return userId;
    }


    private async void FavoriteTrack(long trackId)
    {
        var track = await _playListTrackService.AddTrackAsFavorite(trackId, CurrentUserId);
        await GetArtistTracks(ArtistId);
        InfoMessage = $"Track {track.Album?.Artist.Name} - {track.Album?.Title} - {track.Name} added to playlist Favorites.";
    }

    private async void UnfavoriteTrack(long trackId)
    {
        var track = await _playListTrackService.RemoveTrackFromFavorite(trackId, CurrentUserId);
        await GetArtistTracks(ArtistId);
        InfoMessage = $"Track {track.Album?.Artist.Name} - {track.Album?.Title} - {track.Name} removed from playlist Favorites.";
    }

    private async void OpenPlaylistDialog(long trackId)
    {
        CloseInfoMessage();
        SelectedTrack = _tracks.FirstOrDefault(t => t.TrackId == trackId);
        PlaylistDialog.Open();
    }

    private async void AddTrackToPlaylist()
    {
        await _playListTrackService.AddTrackToPlayList(SelectedTrack.TrackId, CurrentUserId, _newPlayListName, _selectedPlayListId);
        CloseInfoMessage();
        InfoMessage = $"Track {SelectedTrack.ArtistName} - {SelectedTrack.AlbumTitle} - {SelectedTrack.TrackName} added to playlist {{playlist name}}.";
        PlaylistDialog.Close();
    }


    private void CloseInfoMessage()
    {
        InfoMessage = "";
    }
}
